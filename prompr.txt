LuckySim 프로젝트 완전 구조 및 개발 가이드
=====================================================

📋 프로젝트 개요
==============
프로젝트명: LuckySim (복권 시뮬레이터)
목적: 100% 클라이언트 사이드 한국 복권 시뮬레이터 (로또 6/45, 스피또1000, 연금복권 720+)
특징: 완전한 오프라인 지원, PWA, 실제 도박 없는 안전한 복권 체험
원본: Replit에서 개발된 프로젝트 → GitHub으로 이전
배포: Netlify 자동배포 (GitHub main 브랜치 연동)
도메인: https://luckysim.netlify.app

🏗️ 전체 아키텍처
================

프론트엔드 (SPA)
--------------
- 프레임워크: React 18 + TypeScript 5
- 라우팅: Wouter (경량 클라이언트 사이드 라우팅)
- 빌드 도구: Vite 5.4 (HMR, 빠른 개발 환경)
- UI 프레임워크: Radix UI + shadcn/ui 디자인 시스템
- 스타일링: Tailwind CSS (모바일 퍼스트, 다크모드 지원)
- 애니메이션: CSS transitions + Tailwind 애니메이션
- PWA: 서비스 워커 + 매니페스트 (오프라인 지원)

백엔드 (개발용)
--------------
- 서버: Express.js (정적 파일 서빙, 개발 환경)
- 데이터베이스: 없음 (완전 클라이언트 사이드)
- 스키마: shared/schema.ts (타입 정의용)

상태 관리
--------
- 메인: Zustand (복권 게임 상태 및 티켓 관리)
- 영속성: Zustand persist middleware (localStorage)
- 상태 구조:
  * lotto645: 로또 6/45 데이터 (티켓, 통계, 설정)
  * speetto1000: 스피또1000 데이터
  * pension720: 연금복권720+ 데이터
  * settings: 앱 설정 (다크모드, 알림 등)

🛠️ 기술 스택 상세
=================

Core Dependencies
-----------------
- react: ^18.3.1 (UI 라이브러리)
- typescript: ^5.7.2 (타입 시스템)
- vite: ^5.4.19 (빌드 도구)
- tailwindcss: ^3.4.18 (CSS 프레임워크)
- zustand: ^5.0.2 (상태 관리)
- wouter: ^3.3.6 (라우팅)

UI Components
------------
- @radix-ui/react-*: Headless UI 컴포넌트
- lucide-react: ^0.468.0 (아이콘)
- recharts: ^2.13.3 (차트 및 그래프)
- class-variance-authority: ^0.7.1 (조건부 스타일링)
- clsx: ^2.1.1 (클래스 이름 결합)

Development
-----------
- tsx: ^4.19.2 (TypeScript 실행기)
- @types/react: ^18.3.17 (React 타입)
- eslint: ^9.17.0 (코드 품질)
- prettier: 코드 포맷팅

📁 상세 디렉토리 구조
===================

LuckySim/
├── 📁 client/                         # 프론트엔드 (React SPA)
│   ├── 📄 index.html                  # SPA 진입점
│   ├── 📁 public/                     # 정적 파일
│   │   ├── 📄 manifest.json           # PWA 매니페스트
│   │   ├── 📄 sw.js                   # 서비스 워커
│   │   └── 📄 lotto-logo.svg          # 공식 로또 로고
│   └── 📁 src/
│       ├── 📄 App.tsx                 # 메인 앱 컴포넌트
│       ├── 📄 main.tsx                # React 진입점
│       ├── 📄 index.css               # 글로벌 스타일
│       ├── 📁 components/             # UI 컴포넌트
│       │   ├── 📁 layout/             # 레이아웃 컴포넌트
│       │   │   ├── 📄 header.tsx      # 헤더 (로고, 네비게이션)
│       │   │   └── 📄 footer.tsx      # 푸터 (연락처, 법적 고지)
│       │   ├── 📁 lottery/            # 복권 관련 컴포넌트
│       │   │   ├── 📄 lottery-card.tsx     # 복권 선택 카드
│       │   │   ├── 📄 lotto-modal.tsx      # 로또 6/45 모달
│       │   │   ├── 📄 scratch-modal.tsx    # 스피또1000 모달
│       │   │   ├── 📄 pension-modal.tsx    # 연금복권 모달
│       │   │   ├── 📄 result-modal.tsx     # 결과 표시 모달
│       │   │   ├── 📄 scratch-area.tsx     # 스크래치 영역
│       │   │   └── 📄 lotto-stats.tsx      # 복권별 통계
│       │   ├── 📁 stats/              # 통계 컴포넌트
│       │   │   └── 📄 stats-card.tsx       # 통계 카드
│       │   └── 📁 ui/                 # 재사용 UI 컴포넌트 (shadcn/ui)
│       │       ├── 📄 button.tsx           # 버튼 컴포넌트
│       │       ├── 📄 card.tsx             # 카드 컴포넌트
│       │       ├── 📄 dialog.tsx           # 다이얼로그
│       │       ├── 📄 input.tsx            # 입력 필드
│       │       ├── 📄 progress.tsx         # 프로그레스 바
│       │       └── ... (총 30+ 컴포넌트)
│       ├── 📁 hooks/                  # 커스텀 훅
│       │   ├── 📄 use-mobile.tsx           # 모바일 감지
│       │   └── 📄 use-toast.ts             # 토스트 알림
│       ├── 📁 lib/                    # 유틸리티 라이브러리
│       │   ├── 📄 crypto-random.ts         # 암호화 난수 생성
│       │   ├── 📄 lottery-logic.ts         # 복권 로직
│       │   ├── 📄 database.ts              # 로컬 데이터베이스
│       │   ├── 📄 queryClient.ts           # 쿼리 클라이언트
│       │   └── 📄 utils.ts                 # 일반 유틸리티
│       ├── 📁 pages/                  # 페이지 컴포넌트
│       │   ├── 📄 home.tsx                 # 메인 페이지
│       │   ├── 📄 lotto645.tsx             # 로또 6/45 페이지
│       │   ├── 📄 speetto1000.tsx          # 스피또1000 페이지
│       │   ├── 📄 pension720.tsx           # 연금복권 페이지
│       │   ├── 📄 stats.tsx                # 통계 페이지
│       │   └── 📄 not-found.tsx            # 404 페이지
│       ├── 📁 stores/                 # Zustand 상태 스토어
│       │   ├── 📄 lottery-store.ts         # 복권 상태 관리
│       │   └── 📄 settings-store.ts        # 설정 상태 관리
│       └── 📁 types/                  # TypeScript 타입 정의
│           └── 📄 lottery.ts               # 복권 관련 타입
├── 📁 server/                         # 백엔드 (개발용)
│   ├── 📄 index.ts                    # Express 서버
│   ├── 📄 routes.ts                   # API 라우트
│   ├── 📄 storage.ts                  # 스토리지 유틸
│   └── 📄 vite.ts                     # Vite 개발 서버
├── 📁 shared/                         # 공유 스키마
│   └── 📄 schema.ts                   # 타입 스키마 정의
├── 📁 dist/                          # 빌드 결과물
│   └── 📁 public/                     # 배포용 파일
├── 📁 attached_assets/                # 첨부 자산 (이미지 등)
├── 📄 package.json                    # 프로젝트 설정
├── 📄 vite.config.ts                  # Vite 설정
├── 📄 tailwind.config.ts              # Tailwind 설정
├── 📄 tsconfig.json                   # TypeScript 설정
├── 📄 components.json                 # shadcn/ui 설정
├── 📄 netlify.toml                    # Netlify 배포 설정
└── 📄 prompr.txt                      # 이 문서

🎮 핵심 기능 상세
================

1. 복권 시뮬레이터
-----------------

로또 6/45 (client/src/components/lottery/lotto-modal.tsx)
* 수동/자동 번호 선택 (1~45 중 6개)
* 보너스 번호 포함 추첨 시뮬레이션
* 당첨 등급별 확률: 1등(1/8,145,060), 2등(1/1,357,510), 3등(1/35,724) 등
* 당첨금 계산 및 수익률 분석
* 구매 이력 및 통계 저장

스피또1000 (client/src/components/lottery/scratch-modal.tsx)
* 터치/마우스 스크래치 상호작용
* Canvas API 활용 스크래치 효과
* 즉석 당첨 확인 (5억원 1등부터 1천원 5등까지)
* 당첨 확률: 1등(1/5,000,000), 2등(1/1,000,000) 등
* 스크래치 애니메이션 및 음향 효과

연금복권 720+ (client/src/components/lottery/pension-modal.tsx)
* 7자리 번호 2세트 선택
* 월 지급금 시뮬레이션 (1등: 월 700만원 × 20년)
* 조별 당첨 시스템
* 연금 지급 스케줄 계산

2. 암호화 난수 생성 시스템
------------------------

// client/src/lib/crypto-random.ts
export class CryptoRandom {
  private seed: string;
  
  constructor() {
    // Web Crypto API로 암호학적 시드 생성
    this.seed = this.generateCryptoSeed();
  }
  
  randomInt(min: number, max: number): number {
    // 암호학적으로 안전한 난수 생성
    // SHA-256 해시 기반 시드 검증
    // 균등 분포 보장
  }
  
  uniqueRandomInts(count: number, min: number, max: number): number[] {
    // 중복 없는 난수 배열 생성
    // Fisher-Yates 셔플 알고리즘 적용
  }
  
  generateLottoNumbers(): number[] {
    // 로또 번호 생성 (1~45 중 6개)
    return this.uniqueRandomInts(6, 1, 45).sort((a, b) => a - b);
  }
}

3. 상태 관리 시스템
------------------

// client/src/stores/lottery-store.ts
interface LotteryState {
  lotto645: {
    tickets: LottoTicket[];           // 구매한 티켓 목록
    stats: {
      totalTickets: number;           // 총 구매 티켓 수
      totalSpent: number;             // 총 구매 금액
      totalWon: number;               // 총 당첨 금액
      winCount: number;               // 당첨 횟수
      winRate: number;                // 당첨율
      roi: number;                    // 수익률 (ROI)
      winsByGrade: Record<number, number>; // 등급별 당첨 현황
    };
    settings: {
      autoMode: boolean;              // 자동 모드 설정
      quickPick: boolean;             // 빠른 선택 모드
      notifications: boolean;         // 알림 설정
    };
  };
  speetto1000: { /* 동일 구조 */ };
  pension720: { /* 동일 구조 */ };
}

const useLotteryStore = create<LotteryState>()(
  persist(
    (set, get) => ({
      // 상태 초기값
      lotto645: { /* 초기값 */ },
      
      // 액션들
      generateLottoTicket: (manual?: boolean) => { /* 티켓 생성 */ },
      checkWinning: (ticket: LottoTicket) => { /* 당첨 확인 */ },
      updateStats: () => { /* 통계 업데이트 */ },
      resetData: () => { /* 데이터 초기화 */ },
    }),
    {
      name: 'lottery-storage',
      version: 1,
    }
  )
);

4. UI 컴포넌트 시스템
-------------------

복권 카드 (client/src/components/lottery/lottery-card.tsx)
* 3가지 복권 타입별 커스터마이징
* 색상 테마: blue(로또), red(스피또), gold(연금복권)
* 반응형 디자인 (모바일/데스크톱)
* 호버 효과 및 클릭 인터랙션

모달 시스템 (Radix UI Dialog 기반)
* 접근성 준수 (ARIA, 키보드 네비게이션)
* 애니메이션 및 오버레이
* 모바일 최적화 (전체 화면)

통계 시각화 (Recharts)
* 구매/당첨 추이 차트
* 등급별 당첨 분포
* 수익률 그래프
* 인터랙티브 툴팁

5. PWA 기능
-----------

서비스 워커 (client/public/sw.js)
* 오프라인 캐싱
* 백그라운드 동기화
* 푸시 알림 (추후 확장)

매니페스트 (client/public/manifest.json)
* 앱 설치 가능
* 네이티브 앱 경험
* 커스텀 아이콘 및 스플래시 화면

🎨 디자인 시스템
===============

색상 팔레트
----------
- Primary Blue: #3B82F6 (로또 6/45)
- Danger Red: #EF4444 (스피또1000)
- Warning Gold: #F59E0B (연금복권720+)
- Success Green: #10B981 (당첨)
- Gray Scale: #374151 ~ #F9FAFB

컴포넌트 변형
-----------
// Button 컴포넌트 예시
const buttonVariants = cva(
  "inline-flex items-center justify-center rounded-md",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive: "bg-destructive text-destructive-foreground",
        outline: "border border-input bg-background hover:bg-accent",
        secondary: "bg-secondary text-secondary-foreground",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
  }
);

타이포그래피
----------
- Heading: font-bold text-2xl ~ text-5xl
- Body: text-sm ~ text-lg
- Caption: text-xs
- Monospace: font-mono (복권 번호)

반응형 브레이크포인트
-----------------
- Mobile: < 640px
- Tablet: 640px ~ 1024px
- Desktop: > 1024px

🚀 개발 & 배포 가이드
====================

개발 환경 설정
--------------
1. 저장소 클론: `git clone https://github.com/wheemin1/LOTTO.git`
2. 의존성 설치: `npm install`
3. 개발 서버 시작: `npm run dev`
4. 브라우저에서 확인: `http://localhost:5000`

빌드 & 배포
----------
1. 프로덕션 빌드: `npm run build`
2. 빌드 결과 확인: `dist/public/` 폴더
3. GitHub 푸시: `git add . && git commit -m "update" && git push`
4. Netlify 자동 배포: main 브랜치 푸시 시 자동 트리거

배포 설정 (netlify.toml)
----------------------
[build]
  publish = "dist/public"
  command = "npm run build"

[build.environment]
  NODE_VERSION = "18"

[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200

성능 최적화
----------
- Vite 번들 분할 (Dynamic Imports)
- 이미지 최적화 (WebP, 레이지 로딩)
- 코드 스플리팅 (페이지별)
- Tree Shaking (미사용 코드 제거)
- Gzip 압축

🔧 개발 도구 & 설정
===================

TypeScript 설정 (tsconfig.json)
------------------------------
{
  "compilerOptions": {
    "target": "ES2020",
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["client/src/*"],
      "@shared/*": ["shared/*"]
    }
  }
}

Vite 설정 (vite.config.ts)
--------------------------
export default defineConfig({
  plugins: [
    react(),
    runtimeErrorOverlay(),
  ],
  resolve: {
    alias: {
      "@": path.resolve(import.meta.dirname, "client", "src"),
      "@shared": path.resolve(import.meta.dirname, "shared"),
    },
  },
  root: path.resolve(import.meta.dirname, "client"),
  build: {
    outDir: path.resolve(import.meta.dirname, "dist/public"),
    emptyOutDir: true,
    rollupOptions: {
      output: {
        manualChunks: {
          vendor: ['react', 'react-dom'],
          ui: ['@radix-ui/react-dialog', '@radix-ui/react-button'],
        },
      },
    },
  },
});

Tailwind 설정 (tailwind.config.ts)
----------------------------------
module.exports = {
  darkMode: ["class"],
  content: [
    "client/src/**/*.{ts,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        // ... 더 많은 색상 변수
      },
      animation: {
        "scratch": "scratch 0.5s ease-in-out",
        "bounce-number": "bounce 0.6s ease-in-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
};

📊 프로젝트 통계 & 메트릭
========================

코드베이스 규모
--------------
- 총 파일 수: 약 150+ 파일
- TypeScript/TSX: 약 80+ 파일
- 총 코드 라인: 약 8,000+ 라인
- 컴포넌트 수: 40+ 개
- 페이지 수: 6개
- 스토어 수: 2개

성능 지표
--------
- 빌드 시간: ~4초
- 번들 크기: ~465KB (gzipped: ~145KB)
- Lighthouse 점수: 95+ (Performance, Accessibility, Best Practices, SEO)
- 첫 화면 렌더링: <1초
- 상호작용 준비: <2초

테스트 커버리지 (추후 구현 예정)
----------------------------
- 단위 테스트: Jest + React Testing Library
- E2E 테스트: Playwright
- 시각적 회귀 테스트: Chromatic

🔮 향후 개발 계획
================

단기 (1-2개월)
--------------
- [ ] 사용자 인증 시스템 (Firebase Auth)
- [ ] 클라우드 데이터 동기화
- [ ] 고급 통계 분석 (머신러닝 패턴 분석)
- [ ] 소셜 기능 (친구와 결과 공유)

중기 (3-6개월)
--------------
- [ ] 새로운 복권 게임 추가 (연금복권 520)
- [ ] 실시간 추첨 결과 연동
- [ ] 푸시 알림 시스템
- [ ] 다국어 지원 (영어, 일본어)

장기 (6-12개월)
---------------
- [ ] 네이티브 모바일 앱 (React Native)
- [ ] 블록체인 투명성 기능
- [ ] AI 번호 추천 시스템
- [ ] 커뮤니티 기능

🐛 알려진 이슈 & 해결책
======================

현재 알려진 이슈
--------------
1. ✅ Windows 환경 NODE_ENV 설정 이슈 → set 명령어로 해결
2. ✅ 빌드 경로 문제 → dist/public 경로 수정으로 해결
3. ✅ 로또 구슬 텍스트 가독성 → 검정색 통일로 해결
4. ✅ 스피또 카드 불필요 정보 → 간소화 완료

해결된 이슈
----------
- ✅ Vite HMR 연결 실패 → 서버 재시작으로 해결
- ✅ Tailwind 클래스 적용 안됨 → 설정 파일 경로 수정
- ✅ 모바일 반응형 이슈 → 브레이크포인트 재설정
- ✅ 다크모드 깜빡임 → 초기 테마 로딩 최적화

📞 연락처 & 지원
================

개발자 연락처
-----------
- 이메일: jowheemin@gmail.com
- GitHub: https://github.com/wheemin1/LOTTO
- 배포 사이트: https://luckysim.netlify.app

기술 지원
--------
- 버그 리포트: GitHub Issues
- 기능 요청: GitHub Discussions
- 보안 이슈: 이메일 직접 연락

라이선스
-------
MIT License - 상업적 사용 가능, 수정 및 재배포 허용

마지막 업데이트: 2025년 8월 2일
개발 상태: 활발한 개발 중 🚀
버전: v1.0.0