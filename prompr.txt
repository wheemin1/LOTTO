LuckySim 프로젝트 구조 및 코드 정리
📋 프로젝트 개요
프로젝트명: LuckySim (복권 시뮬레이터)
목적: 100% 클라이언트 사이드 한국 복권 시뮬레이터 (로또 6/45, 스피또1000, 연금복권 720+)
특징: 완전한 오프라인 지원, PWA, 실제 도박 없는 안전한 복권 체험
원본: Replit에서 개발된 프로젝트
🏗️ 전체 아키텍처
프론트엔드
프레임워크: React 18 + TypeScript
라우팅: Wouter (경량 클라이언트 사이드 라우팅)
빌드 도구: Vite
UI 프레임워크: Radix UI + shadcn/ui 디자인 시스템
스타일링: Tailwind CSS
백엔드
서버: Express.js (주로 개발용 및 정적 파일 서빙)
데이터베이스: PostgreSQL + Drizzle ORM (현재 미사용, 추후 확장용)
스키마: Drizzle-Zod로 타입 안전성 보장
상태 관리
메인: Zustand (복권 게임 상태 및 티켓 관리)
영속성: Zustand persist middleware
로컬 DB: Dexie (IndexedDB 래퍼
ㅡㅡㅡ
📁 디렉토리 구조
LuckySim/
├── client/                    # 프론트엔드 (React SPA)
│   ├── public/               # 정적 파일
│   │   ├── manifest.json     # PWA 매니페스트
│   │   └── sw.js            # 서비스 워커
│   └── src/
│       ├── components/       # UI 컴포넌트
│       │   ├── layout/      # 레이아웃 컴포넌트
│       │   ├── lottery/     # 복권 관련 컴포넌트
│       │   ├── stats/       # 통계 컴포넌트
│       │   └── ui/          # 재사용 가능한 UI 컴포넌트 (shadcn/ui)
│       ├── hooks/           # 커스텀 훅
│       ├── lib/             # 유틸리티 라이브러리
│       ├── pages/           # 페이지 컴포넌트
│       ├── stores/          # Zustand 상태 스토어
│       └── types/           # TypeScript 타입 정의
├── server/                   # 백엔드 (Express.js)
├── shared/                   # 공유 스키마
└── attached_assets/          # 첨부 자산

🎮 핵심 기능
1. 복권 시뮬레이터
로또 6/45: 수동/자동 번호 선택, 추첨 시뮬레이션, 당첨금 계산
스피또1000: 터치/마우스 스크래치 상호작용, 즉석 당첨 확인
연금복권 720+: 7자리 번호 선택, 월 지급금 시뮬레이션

2. 암호화 난수 생성
// crypto-random.ts - Web Crypto API 사용
export class CryptoRandom {
  randomInt(min: number, max: number): number {
    // 암호학적으로 안전한 난수 생성
    // SHA-256 시드 검증으로 투명성 보장
  }
  
  uniqueRandomInts(count: number, min: number, max: number): number[] {
    // 중복 없는 난수 배열 생성
  }
}